class Solution:
	def numIslands(self, grid: 'List[List[str]]') -> 'int':
		count = 0

		def visit(x, y):
			if grid[x][y] == "1":
				grid[x][y] = "-1"
			if x > 0 and grid[x - 1][y] == "1":
				visit(x - 1, y)
			if x < len(grid) - 1 and grid[x + 1][y] == "1":
				visit(x + 1, y)
			if y > 0 and grid[x][y - 1] == "1":
				visit(x, y - 1)
			if y < len(grid[0]) - 1 and grid[x][y + 1] == "1":
				visit(x, y + 1)

		for i in range(len(grid)):
			for j in range(len(grid[0])):
				if grid[i][j] == "1":
					count += 1
					visit(i, j)
		return count

print(Solution().numIslands([
	["1", "1", "1", "1", "0"], 
	["1", "1", "0", "1", "0"], 
	["1", "1", "0", "0", "0"], 
	["0", "0", "0", "0", "0"]
]))

print(Solution().numIslands([
	['1', '1', '0', '0', '0'], 
	['1', '1', '0', '0', '0'], 
	['0', '0', '1', '0', '0'], 
	['0', '0', '0', '1', '1']
]))

print(Solution().numIslands([["1"]]))

print(Solution().numIslands([
	["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"], 
	["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"], 
	["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"], 
	["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"], 
	["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"], 
	["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"], 
	["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"], 
	["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"], 
	["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"], 
	["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"], 
	["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"], 
	["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"], 
	["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"], 
	["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"], 
	["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"], 
	["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"], 
	["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"], 
	["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"], 
	["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"], 
	["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]
]))
