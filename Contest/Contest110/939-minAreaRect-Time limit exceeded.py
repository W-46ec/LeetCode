import math
class Solution:
	def minAreaRect(self, points):
		"""
		:type points: List[List[int]]
		:rtype: int
		"""
		if len(points) <= 1:
			return 0
		orderedPoints = sorted(points, key = lambda e: math.sqrt(sum(e)))
		l = []
		for i in orderedPoints:
			for j in orderedPoints[orderedPoints.index(i):]:
				if j[0] != i[0] and j[1] != i[1]:
					if [j[0], i[1]] in points and [i[0], j[1]] in points:
						l.append(abs(j[0] - i[0]) * abs(j[1] - i[1]))
		if len(l) == 0:
			return 0
		return min(l)
		
m = [[24530,21239],[17815,20659],[12848,936],[24530,18796],[24172,37136],[37015,20659],[26777,6098],[17815,936],[14775,30504],[6697,18112],[38678,37136],[14775,16372],[24172,32178],[24530,32178],[6697,32178],[31098,28592],[11323,32178],[14158,18039],[28750,30504],[17815,34098],[24172,25416],[6697,10989],[24530,10989],[14,5712],[11196,5712],[6763,30504],[11196,10969],[14158,6098],[14,10989],[22702,25416],[37015,16372],[24530,5712],[28750,11969],[37015,25109],[37015,18112],[13419,18112],[24172,5712],[27262,20659],[24530,936],[27262,6098],[37015,6098],[28750,35126],[22702,23676],[6697,34048],[37015,37136],[27262,18112],[36038,21239],[28750,32178],[25,10969],[12848,11969],[14158,35126],[14775,25109],[14775,37136],[13419,6098],[14,18039],[6763,20659],[14,37136],[12848,5712],[17815,28592],[22702,34048],[24530,10969],[13419,18039],[6697,25416],[11196,37136],[27262,18039],[24530,37136],[26777,18112],[12848,34048],[37015,34048],[14,25109],[24530,6098],[26777,30504],[24172,936],[31098,20659],[26777,23676],[31098,6098],[24530,18112],[37015,5712],[27262,34048],[24172,18112],[13419,25416],[24172,10969],[24530,20659],[14775,936],[3947,21239],[22702,11969],[38678,32178],[14775,34048],[14158,18112],[24530,25416],[13419,25109],[28053,18796],[27262,32178],[28750,936],[37015,32178],[13419,5712],[12848,37136],[14775,5712],[28750,37136],[25,17407],[14,20659],[25,18039],[37015,35126],[28053,18039],[37015,936],[27262,25416],[38678,18112],[36038,10969],[12848,25109],[27262,37136],[28750,25109],[3947,25109],[38678,11969],[26777,34048],[25,21239],[13419,28592],[27262,11969],[27262,23676],[27262,25109],[28053,10969],[37015,23676],[38678,18796],[14158,34098],[11196,35126],[28053,20659],[11323,37136],[14158,18796],[6763,21239],[11196,16372],[14158,30504],[28750,34048],[25,25109],[24172,28592],[38678,30504],[26777,25416],[17815,10989],[6763,34098],[31098,32178],[13419,37136],[11196,6098],[26777,28592],[31098,16372],[36038,28592],[28750,5712],[36038,16372],[14158,20659],[31098,18112],[28750,10969],[31098,35126],[14775,25416],[6763,35126],[12848,34098],[25,18796],[13419,30504],[3947,16372],[27262,5712],[26777,34098],[6697,6098],[31098,37136],[25,30504],[12848,32178],[14,18112],[11323,34048],[38678,16372],[26777,37136],[28053,21239],[28053,25109],[6697,16372],[28053,35126],[14,32178],[12848,6098],[24530,25109],[11323,5712],[14,18796],[28053,17407],[38678,936],[28053,37136],[36038,5712],[14158,17407],[27262,34098],[28750,18039],[24172,35126],[14158,28592],[24172,25109],[31098,17407],[24530,35126],[24172,11969],[28750,18112],[26777,17407],[25,32178],[31098,34048],[14,10969],[28750,6098],[37015,30504],[14775,18039],[17815,16372],[31098,936],[14158,11969],[3947,25416],[17815,18112],[24530,23676],[26777,11969],[11323,936],[31098,5712],[37015,11969],[36038,37136],[17815,6098],[26777,21239],[6763,37136],[27262,10969],[17815,37136],[22702,5712],[14775,20659],[13419,23676],[22702,10969],[14158,32178],[36038,17407],[17815,18039],[11196,30504],[12848,18112],[6697,28592],[13419,11969],[14775,18112],[36038,10989],[36038,18796],[11323,25416],[6763,18796],[14,936],[11196,20659],[31098,34098],[37015,28592],[6697,37136],[26777,10989],[22702,34098],[11323,18796],[28053,25416],[36038,30504],[22702,18796],[11196,11969],[31098,10969],[6763,10989],[3947,34098],[13419,10989],[12848,10989],[28053,10989],[14,34048],[36038,20659],[24172,30504],[28750,17407],[38678,35126],[25,6098],[14775,35126],[14,34098],[3947,23676],[11323,20659],[27262,35126],[11196,25109],[13419,21239],[24172,34098],[13419,35126],[25,35126],[24530,34098],[12848,10969],[38678,21239],[31098,10989],[3947,10969],[28750,21239],[24530,16372],[17815,32178],[14775,10969],[3947,5712],[24172,6098],[11323,25109],[13419,936],[13419,17407],[17815,35126],[11323,18112],[14775,21239],[24172,20659],[6697,18039],[3947,34048],[31098,30504],[38678,6098],[36038,18039],[14158,25109],[6763,25109],[11323,30504],[14775,10989],[22702,30504],[26777,18039],[3947,28592],[11196,32178],[12848,28592],[14,17407],[14775,17407],[14775,23676],[24172,34048],[17815,23676],[28750,34098],[17815,25416],[37015,21239],[12848,21239],[17815,18796],[14158,34048],[12848,25416],[26777,25109],[37015,10989],[26777,936],[22702,35126],[3947,37136],[14,23676],[36038,35126],[36038,32178],[38678,18039],[24530,28592],[28750,20659],[14158,10969],[3947,35126],[6763,18112],[25,34098],[3947,11969],[6697,10969],[27262,28592],[38678,20659],[37015,18796],[6763,32178],[28053,32178],[14775,34098],[28053,30504]]
print(Solution().minAreaRect([[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]))